version: "3.8"

networks:
  backbone:
    driver: bridge

services:
  mysql_db:
    container_name: mysql_db
    image: mysql:latest
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: mysql_db
      MYSQL_ROOT_PASSWORD: seeandyougo
      MYSQL_USER: seeandyougo
      MYSQL_PASSWORD: seeandyougo
      TZ: 'Asia/Seoul'
    ports:
      - "3306:3306"
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --range_optimizer_max_mem_size=16777216
    networks:
      - backbone
  seeandyougo:
    container_name: seeandyougo
    build: ./backend # Dockerfile과 Docker compose가 같은 위치에 있으므로, Dockercompose 기준 현재 디렉토리에서 Dockerfile을 찾는다.
    restart: on-failure
    ports:
      - 8080:8080
    volumes:
      - ./backend:/app
    networks:
      - backbone
    depends_on:
      - mysql_db
      # - wifi-dummy-api
    environment:
      - TZ=Asia/Seoul
  seeandyougo-nginx:
    container_name: seeandyougo-nginx
    # image: nginx:mainline-alpine3.18-slim
    build: .
    restart: always
    ports: 
      - "80:80/tcp"
      - "443:443"
    # volumes:
    #   - ./default.conf:/etc/seeandyougo-nginx/conf.d/default.conf
    networks:
      - backbone
    environment:
      - TZ=Asia/Seoul
    depends_on:
      - seeandyougo
  # wifi-dummy-api:
  #   container_name: wifi-dummy-api
  #   image: shingyeongjun/wifi-dummy-api:latest
  #   restart: always
  #   # ports: 
  #   #   - 3030:8080
  #   networks:
  #     - db-net
  #   environment:
  #     - TZ=Asia/Seoul
  frontend:
    container_name: frontend
    build: ./frontend # Dockerfile과 Docker compose가 같은 위치에 있으므로, Dockercompose 기준 현재 디렉토리에서 Dockerfile을 찾는다.
    restart: on-failure
    ports:
      - 3000:3000
    # volumes:
    #   - ./frontend:/app
    networks:
      - backbone
    depends_on:
      - seeandyougo
    environment:
      - TZ=Asia/Seoul
    # volumes:
    #   - "./client/:/app"
    #   - "/app/node_modules"
